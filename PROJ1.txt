Write-up for Proj 1
.
mkdir2 (Jacob) - My implementation works as intended, creating two directories passed as arguments. The sys_mkdir2 function is reached through a wrapper routine. The function implements the code from sys_mkdir twice, using argstr(0, ...), retrieve the first argument and argstr(1, ...) to retrieve the second argument. The main function of mkdir2.c was modified, but only to add a newline character.

exit2 (Vincenzo) - My implementation is fully functional by properly giving the exit status when called and then exits while rejecting calls with an improper argument count. The function is located sysproc.c. By using argint we can take the integer of the exit status and then print that to the terminal for the user to see and then uses the regular exit function to exit the code from there. Below is a test case using the code with a proper positive integer argument after the initial system call.
$ exit2 5
Exit status: 5

shutdown2 (Ronald) - I did not come across any issues and my implementation works as intended. The system call shutdowns the operating system with a custom message that is passed as an argument. The kernel retrieves the custom message using argstr() and the system call prints out this message before calling the shutdown() system call.

uptime2(Matthew) - My implementation was working as I wanted to. The uptime2 function was added in sysproc.c where I took similar code from uptime and took in a int argument which the kernel gets from argint, because uptime2 required 3 options ticks,seconds, and minutes. Then prints it all in the command line. 